#!/usr/bin/python3.9

import numpy as np

import cv2

import sys
import os
import math

import argparse
parser = argparse.ArgumentParser(description="Split a .png image vertically, horizontally, or in a tiled fashion, with extra features.")
parser.add_argument("fname", help="img file name")
parser.add_argument("prefix", help="prefix of output pngs")
parser.add_argument('--orientation',  choices=["vertical", "horizontal", "tiled"], help="split orientation (default is tiled)")
parser.add_argument('--height',  help="output img height. default is 128 if orientation is vertical, or full image height if horizontal. ")
parser.add_argument('--width', help="output img width. default is 128 if orientation is horizontal, or full image hight if vertical.")
parser.add_argument('--start', choices=["top", "bottom", "center", "left", "right"], help="start from top, BOTTOM or center (for vertical orientation) or left, RIGHT or center (for horizontal orientation). center is default")
parser.add_argument('--outdir', help="output directory, current working directory by default")
parser.add_argument('--addwidth', help="add width to input image")
parser.add_argument('--addheight', help="add height to input image")

args = parser.parse_args()


# if we are tiled, the user can specify left, right, bottom, top, and center






def wadd(img, w):
    if(w%2 != 0):
        print("added width is not divisable by two, adding one to it")
    w = w + 1

    transp = np.zeros((int(img.shape[0]), int(w/2), 4), dtype=np.uint8)
    img = cv2.hconcat([transp,img])
    img = cv2.hconcat([img,transp])
    return img

def hadd(img, h):
    if(h%2 != 0):
        print("added height is not divisable by two, adding one to it")
    h = h + 1

    transp = np.zeros((int(h/2), img.shape[1], 4), dtype=np.uint8)
    img = cv2.vconcat([transp,img])
    img = cv2.vconcat([img,transp])
    return img

def upfit(img, prefW, prefH):
    height = img.shape[0]
    width = img.shape[1]
    if(prefW > width):
        print("Preferred width overshoots image width, resizing.")
        __diff = prefW - width
        img = wadd(img, __diff)

    if(prefH > height):
        print("Preferred height overshoots image height, resizing.")
        __diff = prefH - height
        img = hadd(img, __diff)
    return img




def show(img):
    cv2.imshow("asd", img)
    cv2.waitKey()



def showAndSave(img, path):
    print("presenting " + path)
    cv2.imshow("asd", img)
    cv2.waitKey()
    cv2.imwrite(path, img)





def crop(img, ty, tx, by, bx):
    print("cropping from " + str(tx) + "x" + str(ty) + " to " + str(bx) + "x" + str(by))
    return img[ty:by,tx:bx]


def imgcf(imgw, imgh, tarw, tarh, order, orientation):
    temp=0
    if(orientation=="vertical"):
        temp=math.floor(imgh/tarh)
    else:
        temp=math.floor(imgw/tarw)
    if(order=="center"):
        return int(temp-1)
    else:
        return int(temp)

def imgct(imgw, imgh, tarw, tarh, order, orientation):
    if(orientation=="vertical"):
       return int(math.ceil(imgh/tarh))
    else:
       return int(math.ceil(imgw/tarw))



def diff(imgw, imgh, tarw, tarh, order, orientation):
    fulls=imgcf(imgw, imgh, tarw, tarh, order, orientation)
    if(orientation=="vertical"):
        if(order=="bottom"):
            return tarh - (imgh % tarh)
        elif(order=="top"):
            return tarh - (imgh-(fulls*tarh))
        else:
           return int((imgh%tarh)/2)
    elif(orientation=="horizontal"):
        if(order=="left"):
            return tarw - (imgw-(fulls*tarw))
        elif(order=="right"):
            return tarw - (imgw%tarw)
        else:
            return (imgw%tarw)/2



def gent(imgw, imgh, tarw, tarh, order, orientation):
    _diff=diff(imgw, imgh, tarw, tarh, order, orientation)
    if(orientation=="vertical"):
        print("generating " + str(tarw) + "x" + str(_diff) + " transparent image")
        return np.zeros((int(_diff), tarw, 4), dtype=np.uint8)
    else:
        print("generating " + str(_diff) + "x" + str(tarh) + " transparent image")
        return np.zeros((tarh, int(_diff), 4), dtype=np.uint8)


def merge(order, orientation, transparent, crop, index):
    print("merging")
    if(orientation=="vertical"):
        if(order=="bottom"):
            return cv2.vconcat([transparent, crop])
        elif(order=="top"):
            return cv2.vconcat([crop, transparent])
        else:
            if(index==0):
                return cv2.vconcat([transparent, crop])
            else:
                return cv2.vconcat([crop, transparent])
    else:
        if(order=="left"):
            return cv2.hconcat([crop, transparent])
        elif(order=="right"):
            print(transparent.shape[1])
            print(transparent.shape[0])
            print(crop.shape[1])
            print(crop.shape[0])
            return cv2.hconcat([transparent, crop])
        else:
            if(index==0):
                return cv2.hconcat([transparent, crop])
            else:
                return cv2.hconcat([crop, transparent])





def typ(imgw, imgh, tarw, tarh, order, orientation, index):
    fulls=imgcf(imgw, imgh, tarw, tarh, order, orientation)
    ydiff=diff(imgw, imgh, tarw, tarh, order, orientation)
    if(orientation=="vertical"):
        if(order=="bottom"):
            return int(0)
        elif(order=="top"):
            return int(fulls*tarh)
        else:
            if(index==0):
                return int(0)
            else:
                return int(imgh-(tarh-ydiff))
    elif(orientation=="horizontal"):
        return int(0)

def byp(imgw, imgh, tarw, tarh, order, orientation, index):
    fulls=imgcf(imgw, imgh, tarw, tarh, order, orientation)
    ydiff=diff(imgw, imgh, tarw, tarh, order, orientation)
    if(orientation=="vertical"):
        if(order=="bottom"):
            return int(imgh%tarh)
        elif(order=="top"):
            return int(imgh)
        else:
            if(index==0):
                return int(tarh-ydiff)
            else:
                return int(imgh)
    elif(orientation=="horizontal"):
        return int(tarh)


def txp(imgw, imgh, tarw, tarh, order, orientation, index):
    fulls=imgcf(imgw, imgh, tarw, tarh, order, orientation)
    xdiff=diff(imgw, imgh, tarw, tarh, order, orientation)
    if(orientation=="vertical"):
        return int(0)
    elif(orientation=="horizontal"):
        if(order=="left"):
            return int(fulls*tarw)
        elif(order=="right"):
            return int(0)
        else:
            if(index==0):
                return int(0)
            else:
                return int(imgw-(tarw-xdiff))


def bxp(imgw, imgh, tarw, tarh, order, orientation, index):
    fulls=imgcf(imgw, imgh, tarw, tarh, order, orientation)
    xdiff=diff(imgw, imgh, tarw, tarh, order, orientation)
    if(orientation=="vertical"):
        return int(tarw)
    elif(orientation=="horizontal"):
        if(order=="left"):
            return int(imgw)
        elif(order=="right"):
            return int(imgw%tarw)
        else:
            if(index==0):
                return int(tarw-xdiff)
            else:
                return int(imgw)






def tyf(imgw, imgh, tarw, tarh, order, orientation, index):
    Hd2 = imgh/2
    THd2 = tarh/2
    Wd2 = imgw/2
    TWd2 = tarw/2
    if(orientation=="vertical"):
        if(order=="bottom"):
            return int(imgh-((index+1)*tarh))
        elif(order=="top"):
            return int(index*tarh)
        elif(order=="center"):
            if(index == 0):
                return int(Hd2-THd2)
            elif(index%2 == 1):
                return int(Hd2+(index*THd2))
            elif(index%2 == 0):
                return int(Hd2-((index+1)*THd2))
    elif(orientation=="horizontal"):
        return int(0)

def byf(imgw, imgh, tarw, tarh, order, orientation, index):
    Hd2 = imgh/2
    THd2 = tarh/2
    Wd2 = imgw/2
    TWd2 = tarw/2
    ty=tyf(imgw,imgh,tarw,tarh,order,orientation,index)
    if(orientation=="vertical"):
        if(order=="bottom"):
            return int(ty+tarh)
        elif(order=="top"):
            #return int(ty+(index+1)*tarh)
            return int(ty+tarh)
        elif(order=="center"):
            return int(ty+tarh)
    elif(orientation=="horizontal"):
        return int(tarh)


def txf(imgw, imgh, tarw, tarh, order, orientation, index):
    Wd2 = imgw/2
    TWd2 = tarw/2
    if(orientation=="vertical"):
        return int(0)
    elif(orientation=="horizontal"):
        if(order=="left"):
            return int(index*tarw)
        elif(order=="right"):
            return int(imgw-((index+1)*tarw))
        elif(order=="center"):
            if(index == 0):
                return int(Wd2-TWd2)
            elif(index%2 == 1):
                return int(Wd2+(index*TWd2))
            elif(index%2 == 0):
                return int(Wd2-((index+1)*TWd2))

def bxf(imgw, imgh, tarw, tarh, order, orientation, index):
    Wd2 = imgw/2
    TWd2 = tarw/2
    tx=txf(imgw,imgh,tarw,tarh,order,orientation,index)
    if(orientation=="vertical"):
        return int(tarw)
    elif(orientation=="horizontal"):
        if(order=="left"):
            return int(index*tarw+tarw)
        elif(order=="right"):
            return int(tx+tarw)
        elif(order=="center"):
            return int(tx+tarw)






abspath=os.path.abspath(args.fname)

if(not args.outdir):
    args.outdir=os.getcwd()


if(not args.orientation):
    args.orientation="tiled"

if(not args.start):
    args.start="center"

if(not args.addwidth):
    args.addwidth = int(0)
else:
    args.addwidth = int(args.addwidth)


if(not args.addheight):
    args.addheight = int(0)
else:
    args.addheight = int(args.addheight)


if(args.orientation == "vertical"):
    assert(args.start != "left")
    assert(args.start != "right")
elif(args.orientation == "horizontal"):
    assert(args.start != "top")
    assert(args.start != "bottom")


if(args.width):
    args.width = int(args.width)
if(args.height):
    args.height = int(args.height)



def getil(img, width, height, tarw, tarh, order, orientation):
    imgs = []
    def addImg(image, index):
        imgs.append((image, index))

    fulls=imgcf(width, height, tarw, tarh, order, orientation)

    total=imgct(width, height, tarw, tarh, order, orientation)
    parts = fulls - total
    partExists = fulls != total
    print("fulls:" + str(fulls))
    print("total:" + str(total))

    for i in range(0,fulls):
        ty, tx, by, bx = 0, 0, 0, 0

        ty = tyf(width, height, tarw, tarh, order, orientation, i)
        tx = txf(width, height, tarw, tarh, order, orientation, i)
        by = byf(width, height, tarw, tarh, order, orientation, i)
        bx = bxf(width, height, tarw, tarh, order, orientation, i)

        oimg=crop(img,ty,tx,by,bx)
        addImg(oimg, i)



    if(partExists):
        ydiff=diff(width, height, tarw, tarh, order, orientation)
        if(order=="center"):
            ty0 = typ(width, height, tarw, tarh, order, orientation, 0)
            tx0 = txp(width, height, tarw, tarh, order, orientation, 0)
            by0 = byp(width, height, tarw, tarh, order, orientation, 0)
            bx0 = bxp(width, height, tarw, tarh, order, orientation, 0)

            cropped=crop(img, ty0, tx0, by0, bx0)
            transparent = gent(width, height, tarw, tarh, order, orientation)

            out = merge(order, orientation, transparent, cropped, 0)
            addImg(out, fulls)


            ty1 = typ(width, height, tarw, tarh, order, orientation, 1)
            tx1 = txp(width, height, tarw, tarh, order, orientation, 1)
            by1 = byp(width, height, tarw, tarh, order, orientation, 1)
            bx1 = bxp(width, height, tarw, tarh, order, orientation, 1)

            cropped=crop(img, ty1, tx1, by1, bx1)
            transparent = gent(width, height, tarw, tarh, order, orientation)

            out = merge(order, orientation, transparent, cropped, 1)
            addImg(out, fulls+1)


        else:
            ty = typ(width, height, tarw, tarh, order, orientation, 0)
            tx = txp(width, height, tarw, tarh, order, orientation, 0)
            by = byp(width, height, tarw, tarh, order, orientation, 0)
            bx = bxp(width, height, tarw, tarh, order, orientation, 0)

            cropped=crop(img, ty, tx, by, bx)
            transparent = gent(width, height, tarw, tarh, order, orientation)

            out = merge(order, orientation, transparent, cropped, 0)
            addImg(out, fulls)

    return imgs



img = cv2.imread(abspath, cv2.IMREAD_UNCHANGED)
if(img is not None):
    height=img.shape[0]
    width=img.shape[1]
    print(width)


    if(args.addwidth > 0):
        print("Adding width to input image")
        img = wadd(img, args.addwidth)
    if(args.addheight > 0):
        print("Adding height to input image")
        img = hadd(img, args.addheight)

    height=img.shape[0]
    width=img.shape[1]


    if(args.orientation == "vertical" or args.orientation == "horizontal"):
        
        tarW = 0
        tarH = 0

        if(args.orientation == "vertical"):
            #if no width specified, take whole image width
            if(not args.width):
                tarW = width
            else:
                tarW = args.width
            #if no height specified, do 128
            if(not args.height):
                tarH = 128
            else:
                tarH = args.height
        else:
            #if no width specified, do 128
            if(not args.width):
                tarW = 128
            else:
                tarW = args.width
            #if no hight specified, do whole image height
            if(not args.height):
                tarH = height
            else:
                tarH = args.height

        #if one tile alone overshoots the image's dimensions, upscale it
        img = upfit(img, tarW, tarH)
        height = img.shape[0]
        width = img.shape[1]

        imgs = getil(img, width, height, tarW, tarH, args.start, args.orientation)
        for img in imgs:
            imgData=img[0]
            index=img[1]
            fpath = args.outdir + "/" + args.prefix + "_" + str(index) + ".png"
            showAndSave(imgData, fpath)
    elif(args.orientation == "tiled"):
        tarW = 0
        tarH = 0

        #we do verticals first, with full image width and (args.height or 128)
        #but for the sake of preprocessing, we recognize user specified image width,
            #just in case one tile overshoots the whole image
        if(not args.width):
            tarW = width
        else:
            tarW = args.width
        if(not args.height):
            tarH = 128
        else:
            tarH = args.height

        #if one vertical already overshoots the whole image, we upscale
        img = upfit(img, tarW, tarH)
        height = img.shape[0]
        width = img.shape[1]


        order = "center"
        #we stick the whole image's width in there, and respect tarH
        vertImgs = getil(img, width, height, width, tarH, order, "vertical")

        #at this point, we have good verticals.
        #but right now, tarW is very wrong. it should be 128, or args.width.
        if(not args.width):
            tarW = 128
        else:
            tarW = args.width

        #tarH is correct, and we shouldn't need to upscale

        for vi in vertImgs:
            viimg = vi[0]
            viw = viimg.shape[1]
            vih = viimg.shape[0]
            #for every vertical, we want to cut tarH's out of there
            horImgs = getil(viimg, viw, vih, tarW, tarH, order, "horizontal")
            for hi in horImgs:
                row = vi[1]
                col = hi[1]
                imgData = hi[0]
                fpath = args.outdir + "/" + args.prefix + "_" + str(row) + "_" + str(col) + ".png"
                showAndSave(imgData, fpath)




    

else:
    print("not valid image")
    sys.exit(1)
